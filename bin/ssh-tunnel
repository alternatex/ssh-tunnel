#!/usr/bin/env node

"use strict";

/**
 * Module dependencies
 */
var app = require("../lib/app");
var version = JSON.parse(require('fs').readFileSync(__dirname+'/../package.json', 'utf8')).version;

var path = require('path');
var dirname = path.dirname;
var basename = path.basename;

var colors = require("colors");
var program = require('commander');

// TODO:
// -----
// - gather program.command info from lib/prompt/* -> require-dir
// - check configuration file loaded for updates so we don't overwrite stuff used from ml processes without sayin' a word
// - look for global hook pre-command execution, but post option parsing
// - packs -> multi-port local / multi-everything remote
// - packs.status()
// - packs.*

// attach setup helper
app.setup = function setup(){
  var filename = program.file ? program.file : 'tunnel.json';  
  app.init({ filename: filename });
  return app;  
}

// say hi
console.log('SSH-Tunnel'.white.bold); 
console.log(('Version: '+version).white); 

// setup commands
program
  .version(version)
  .command('connect <name>')
  .description('Establish connection')
  .option('-f, --file <file>', 'Load configuration from <file> (default: \'tunnel.json\')')
  .action(function(env, options){
    app.setup().require('connect')(program.args[0]);
  });

program
  .command('copy <name>')
  .description('Copy existing connection')
  .option('-f, --file <file>', 'Load configuration from <file> (default: \'tunnel.json\')')
  .action(function(env, options){
    app.setup().require('copy')(program.args[0]);
  });

program
  .command('delete <name>')
  .description('Delete connection')
  .option('-f, --file <file>', 'Load configuration from <file> (default: \'tunnel.json\')')
  .action(function(env, options){
    app.setup().require('delete')(program.args[0]);
  });

program
  .command('update <name>')
  .description('Update connection')
  .option('-f, --file <file>', 'Load configuration from <file> (default: \'tunnel.json\')')
  .action(function(env, options){
    app.setup().require('delete')(program.args[0]);
  });

program
  .command('export')
  .description('Export connections to file')
  .option('-f, --file <file>', 'Load configuration from <file> (default: \'tunnel.json\')')
  .action(function(env, options){
    console.log();
    app.setup().require('export')();
  });

program
  .command('install')
  .description('Install your public key in a remote machine authorized_keys')
  .option('-f, --file <file>', 'Load configuration from <file> (default: \'tunnel.json\')')
  .action(function(env, options){
    app.setup().require('install')(program.args[0]);
  });

// process
program.parse(process.argv);

// post process
if(program.args.length===0){
  console.log();
  console.log("Starting interactive mode".green);  
  console.log();
  app.setup().require('list')();
}
